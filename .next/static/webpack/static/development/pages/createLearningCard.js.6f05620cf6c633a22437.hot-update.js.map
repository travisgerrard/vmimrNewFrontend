{"version":3,"file":"static/webpack/static/development/pages/createLearningCard.js.6f05620cf6c633a22437.hot-update.js","sources":["webpack:///./components/CreateLearningCard.js"],"sourcesContent":["import React from 'react';\nimport { Query, Mutation } from 'react-apollo';\n//import Select from 'react-select';\nimport gql from 'graphql-tag';\nimport Form from './styles/Form';\nimport Error from './ErrorMessage';\nimport Router from 'next/router';\n//import MarkdownEditor from './MarkdownEditor';\n//import DraftEditor from './DraftEditor';\nimport Mentions from './Mentions';\n\nconst possibleRotationTypes = [\n  { value: 'Wards', label: 'Wards' },\n  { value: 'Nights', label: 'Nights' },\n  { value: 'Ccu', label: 'CCU' },\n  { value: 'Qi', label: 'Quality Improvement' },\n  { value: 'Allergy', label: 'Allergy' },\n  { value: 'Anesthesia', label: 'Anesthesia' },\n  { value: 'Cardiology', label: 'Cardiology' },\n  { value: 'Dermatology', label: 'Dermatology' },\n  { value: 'Endocrinology', label: 'Endocrinology' },\n  { value: 'Ent', label: 'Ears, Nose, Throat (ENT)' },\n  { value: 'Gi', label: 'GI' },\n  { value: 'Gim', label: 'GIM' },\n  { value: 'Geriatrics', label: 'Geriatrics' },\n  { value: 'Gyn', label: 'Gynecology' },\n  { value: 'Hemeonc', label: 'Hematology Oncology' },\n  { value: 'Infectiousdisease', label: 'Infectious Disease (ID)' },\n  { value: 'Nephro', label: 'Nephrology' },\n  { value: 'Neuro', label: 'Neurology' },\n  { value: 'Ophtho', label: 'Ophthalmology' },\n  { value: 'Surgery', label: 'Surgery' },\n  { value: 'Urology', label: 'Urology' },\n  { value: 'Msk', label: 'MSK' },\n  { value: 'Palliative', label: 'Palliative' },\n  { value: 'Path', label: 'Pathology' },\n  { value: 'Procedures', label: 'Procedures' },\n  { value: 'Psych', label: 'Psychiatry' },\n  { value: 'Pulm', label: 'Pulmonology' },\n  { value: 'Rheum', label: 'Rheumatology' },\n  { value: 'Scholarly', label: 'Scholarly' },\n  { value: 'Specialreq', label: 'Special Request' },\n  { value: 'Swing', label: 'Swing' },\n  { value: 'Float', label: 'Float' },\n  { value: 'Sbp', label: 'Systems Based Practice (SBP)' },\n  { value: 'Hyperbarics', label: 'Hyperbarics' },\n  { value: 'DotPhrase', label: 'dotPhrase' },\n  { value: 'Link', label: 'Link' },\n  { value: 'Mksap', label: 'Mksap' }\n];\n\nconst ALL_USERS_QUERY = gql`\n  query ALL_USERS_QUERY {\n    users {\n      id\n      name\n      email\n      permissions\n    }\n  }\n`;\n\nconst CREATE_CARD_MUTATION = gql`\n  mutation CREATE_CARD_MUTATION(\n    $tags: [String]!\n    $title: String!\n    $whatWasLearned: String!\n    $dateWasLearned: String!\n    $wasLearnedWith: String!\n    $taggedUser: [User]\n  ) {\n    createCard(\n      tags: $tags\n      title: $title\n      whatWasLearned: $whatWasLearned\n      dateWasLearned: $dateWasLearned\n      wasLearnedWith: $wasLearnedWith\n      taggedUser: $taggedUSer\n    )\n  }\n`;\n\nclass CreateLearningCard extends React.Component {\n  state = {\n    title: '',\n    whatWasLearned: 'Learned with attending _ on date _'\n  };\n\n  handleChange = e => {\n    console.log(e.target);\n\n    const { name, type, value } = e.target;\n    const val = type === 'number' ? parseFloat(value) : value;\n    this.setState({ [name]: val });\n  };\n\n  handelSelectChange = (e, name) => {\n    this.setState({ [name]: e });\n  };\n\n  indiciesForWordToLeft = (whatWasLearnedText, startPosition) => {\n    const theSubstring = whatWasLearnedText.substring(0, startPosition);\n    // return index of all ' ' in the string\n    var indices = [];\n    for (var i = 0; i < theSubstring.length; i++) {\n      if (theSubstring[i] === ' ' || theSubstring[i] === '\\n') indices.push(i);\n    }\n    // find the last index that occurs and add one to make up for the ' ', and if non occured, make last index 0\n    return indices.length ? indices.pop() + 1 : 0;\n  };\n\n  indiciesForWordToRight = (whatWasLearnedText, startPosition) => {\n    // The string to the right of the blank\n    const theSubstring = whatWasLearnedText.substring(startPosition);\n\n    // return index of all ' ' in the string\n    var indices = [];\n    for (var i = 0; i < theSubstring.length; i++) {\n      if (theSubstring[i] === ' ' || theSubstring[i] === '\\n') indices.push(i);\n    }\n\n    // find the first index that occurs, and if non occured, return length\n    return indices.length ? indices[0] : theSubstring.length;\n  };\n\n  setCaretPosition(el, pos) {\n    let ctrl = document.getElementById(el);\n\n    if (ctrl.setSelectionRange) {\n      ctrl.focus();\n      ctrl.setSelectionRange(pos, pos);\n    } else if (ctrl.createTextRange) {\n      var range = ctrl.createTextRange();\n      range.collapse(true);\n      range.moveEnd('character', pos);\n      range.moveStart('character', pos);\n      range.select();\n    }\n  }\n\n  handleButtonClickWithValue = (\n    whatWasLearnedText,\n    value,\n    word,\n    leftIndex,\n    rightIndex\n  ) => {\n    let newText;\n    const leftText = whatWasLearnedText.slice(0, leftIndex);\n    const rightText = whatWasLearnedText.slice(rightIndex);\n\n    switch (value) {\n      case 'headerOne':\n        newText = `${leftText} # ${word}${rightText}`;\n\n        this.setState({ whatWasLearned: newText }, () => {\n          this.setCaretPosition('whatWasLearned', leftIndex + 3);\n        });\n        break;\n      case 'headerTwo':\n        newText = `${leftText} ## ${word}${rightText}`;\n\n        this.setState({ whatWasLearned: newText }, () => {\n          this.setCaretPosition('whatWasLearned', leftIndex + 4);\n        });\n        break;\n      case 'headerThree':\n        newText = `${leftText} ### ${word}${rightText}`;\n\n        this.setState({ whatWasLearned: newText }, () => {\n          this.setCaretPosition('whatWasLearned', leftIndex + 4);\n        });\n        break;\n      case 'headerFour':\n        newText = `${leftText} #### ${word}${rightText}`;\n\n        this.setState({ whatWasLearned: newText }, () => {\n          this.setCaretPosition('whatWasLearned', leftIndex + 5);\n        });\n        break;\n      case 'bold':\n        newText = `${leftText}**${word}**${rightText}`;\n\n        this.setState({ whatWasLearned: newText }, () => {\n          this.setCaretPosition('whatWasLearned', leftIndex + 2);\n        });\n\n        break;\n      case 'italic':\n        newText = `${leftText}_${word}_${rightText}`;\n\n        this.setState({ whatWasLearned: newText }, () => {\n          this.setCaretPosition('whatWasLearned', leftIndex + 1);\n        });\n        break;\n      case 'strikeThrough':\n        newText = `${leftText}~~${word}~~${rightText}`;\n        console.log(newText);\n\n        this.setState({ whatWasLearned: newText }, () => {\n          this.setCaretPosition('whatWasLearned', leftIndex + 2);\n        });\n        break;\n      case 'link':\n        newText = `${leftText}[${word}](url)${rightText}`;\n\n        this.setState({ whatWasLearned: newText }, () => {\n          this.setCaretPosition('whatWasLearned', leftIndex + 1);\n        });\n        break;\n      case 'quote':\n        newText = `${leftText}\\n\\n> ${word}${rightText}`;\n\n        this.setState({ whatWasLearned: newText }, () => {\n          this.setCaretPosition('whatWasLearned', leftIndex + 4);\n        });\n        break;\n      case 'code':\n        newText = `${leftText}\\`${word}\\`${rightText}`;\n\n        this.setState({ whatWasLearned: newText }, () => {\n          this.setCaretPosition('whatWasLearned', leftIndex + 1);\n        });\n        break;\n      case 'image':\n        newText = `${leftText}![${word}](url)${rightText}`;\n\n        this.setState({ whatWasLearned: newText }, () => {\n          this.setCaretPosition('whatWasLearned', leftIndex + 2);\n        });\n        break;\n      case 'listUl':\n        newText = `${leftText}\\n\\n- ${word}${rightText}`;\n\n        this.setState({ whatWasLearned: newText }, () => {\n          this.setCaretPosition('whatWasLearned', leftIndex + 4);\n        });\n        break;\n      case 'listOl':\n        newText = `${leftText}\\n\\n1. ${word}${rightText}`;\n\n        this.setState({ whatWasLearned: newText }, () => {\n          this.setCaretPosition('whatWasLearned', leftIndex + 5);\n        });\n        break;\n      case 'tasks':\n        newText = `${leftText}\\n\\n- [ ] ${word}${rightText}`;\n\n        this.setState({ whatWasLearned: newText }, () => {\n          this.setCaretPosition('whatWasLearned', leftIndex + 8);\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  markdownButtonPressed = value => {\n    const whatWasLearnedText = this.state.whatWasLearned;\n    const whatWasLearnedTextArea = document.getElementById('whatWasLearned');\n    const startPosition = whatWasLearnedTextArea.selectionStart;\n    const endPosition = whatWasLearnedTextArea.selectionEnd;\n\n    if (startPosition == endPosition) {\n      const prev = whatWasLearnedText.slice(startPosition - 1, startPosition);\n      const next = whatWasLearnedText.slice(startPosition, startPosition + 1);\n\n      if ((prev === '' || prev === ' ') && (next === '' || next === ' ')) {\n        console.log('blanks on EITHER side of cursor position');\n        const leftIndex = this.indiciesForWordToLeft(\n          whatWasLearnedText,\n          startPosition\n        );\n\n        this.handleButtonClickWithValue(\n          whatWasLearnedText,\n          value,\n          '',\n          startPosition,\n          startPosition\n        );\n      } else if (\n        (prev !== '' || prev !== ' ') &&\n        (next === '' || next === ' ')\n      ) {\n        // console.log('blanks on RIGHT side of cursor position');\n        const leftIndex = this.indiciesForWordToLeft(\n          whatWasLearnedText,\n          startPosition\n        );\n\n        // Slice the string to return the word\n        const wordToTheLeft = whatWasLearnedText\n          .substring(0, startPosition)\n          .substring(leftIndex, startPosition);\n\n        this.handleButtonClickWithValue(\n          whatWasLearnedText,\n          value,\n          wordToTheLeft,\n          leftIndex,\n          startPosition\n        );\n        // console.log(wordToTheLeft);\n      } else if (\n        (prev === '' || prev === ' ') &&\n        (next !== '' || next !== ' ')\n      ) {\n        // console.log('blanks on LEFT side of cursor position');\n\n        const lastIndex = this.indiciesForWordToRight(\n          whatWasLearnedText,\n          startPosition\n        );\n\n        // Slice the string to return the word\n        const wordToTheRight = whatWasLearnedText\n          .substring(startPosition)\n          .substring(0, lastIndex);\n\n        this.handleButtonClickWithValue(\n          whatWasLearnedText,\n          value,\n          wordToTheRight,\n          startPosition,\n          startPosition + lastIndex\n        );\n        // console.log(wordToTheRight);\n      } else {\n        // Letters on either side of cursor\n        // console.log('Letters on either side of cursor ');\n\n        const lastIndexRight = this.indiciesForWordToRight(\n          whatWasLearnedText,\n          startPosition\n        );\n        const lastIndexLeft = this.indiciesForWordToLeft(\n          whatWasLearnedText,\n          startPosition\n        );\n\n        const wordCursorWithin = whatWasLearnedText.substring(\n          lastIndexLeft,\n          startPosition + lastIndexRight\n        );\n\n        this.handleButtonClickWithValue(\n          whatWasLearnedText,\n          value,\n          wordCursorWithin,\n          lastIndexLeft,\n          startPosition + lastIndexRight\n        );\n\n        // console.log(wordCursorWithin);\n      }\n    }\n  };\n\n  render() {\n    return (\n      <Mutation mutation={CREATE_CARD_MUTATION} variables={this.state}>\n        {(createCard, { loading, error }) => (\n          <Form\n            data-test=\"form\"\n            onSubmit={async e => {\n              e.preventDefault();\n              // call the mutation\n              const res = await createCard();\n              // change them to the home page.\n              Router.push({\n                pathname: '/'\n              });\n            }}\n          >\n            <Error error={error} />\n            <fieldset disabled={loading} aria-busy={loading}>\n              <label htmlFor=\"title\">\n                Title\n                <input\n                  type=\"text\"\n                  id=\"title\"\n                  name=\"title\"\n                  placeholder=\"Title\"\n                  required\n                  value={this.state.title}\n                  onChange={this.handleChange}\n                />\n              </label>\n              {/* <label htmlFor=\"dateWasLearned\">\n                Date this was learned\n                <input\n                  type=\"text\"\n                  id=\"dateWasLearned\"\n                  name=\"dateWasLearned\"\n                  placeholder=\"Date this was learned\"\n                  required\n                  value={this.state.dateWasLearned}\n                  onChange={this.handleChange}\n                />\n              </label>\n              <label>\n                Rotation Tags\n                <Select\n                  instanceId=\"tags\"\n                  classNamePrefix=\"tagSelect\"\n                  value={this.state.tags}\n                  onChange={e => this.handelSelectChange(e, 'tags')}\n                  options={possibleRotationTypes}\n                  isMulti\n                  isSearchable\n                />\n              </label>\n\n              <label htmlFor=\"wasLearnedWith\">\n                Attending (To reference patient off Attending;s schedule later)\n                <input\n                  type=\"text\"\n                  id=\"wasLearnedWith\"\n                  name=\"wasLearnedWith\"\n                  placeholder=\"Attending you learned this with\"\n                  value={this.state.wasLearnedWith}\n                  onChange={this.handleChange}\n                />\n              </label> */}\n              <label />\n              <label htmlFor=\"whatWasLearned\">\n                Learning point\n                <Query query={ALL_USERS_QUERY}>\n                  {({ data, loading, error }) => {\n                    if (loading) return <p>Loading...</p>;\n                    const userArray = data.users.map(user => {\n                      return { id: user.id, display: user.name };\n                    });\n                    const rotationArray = possibleRotationTypes.map(\n                      rotation => {\n                        return { id: rotation.value, display: rotation.label };\n                      }\n                    );\n\n                    return (\n                      <Mentions users={userArray} rotations={rotationArray} />\n                      // <DraftEditor residents={userArray} />\n                      // <MarkdownEditor\n                      //   residents={userArray}\n                      //   rotationTags={possibleRotationTypes}\n                      //   whatWasLearned={this.state.whatWasLearned}\n                      //   handleChange={this.handleChange}\n                      //   markdownButtonPressed={this.markdownButtonPressed}\n                      // />\n                    );\n                  }}\n                </Query>\n              </label>\n\n              <button type=\"submit\">Submit</button>\n            </fieldset>\n          </Form>\n        )}\n      </Mutation>\n    );\n  }\n}\n\nexport default CreateLearningCard;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAWA;AACA;AAmBA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AADA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgtGA;AAwGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AAOA;AAIA;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AAOA;AAIA;AAEA;AACA;AACA;AAIA;AACA;AAGA;AACA;AAOA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAIA;AACA;AAIA;AACA;AAQA;AACA;AACA;AACA;;;;;;AAzOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA6NA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA7FA;AAmGA;;;;AA3XA;AACA;AA6XA;;;;A","sourceRoot":""}